#!/usr/bin/env python

#
# Copyright 2007 !j Incorporated
#
# This file is part of Canner.
#
# Canner is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canner is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Canner.  If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import with_statement
import os, re, sys, socket
from itertools import count, izip
from collections import defaultdict
import IPy
from canner import taglib


def rwhois_query(query):
    queue = [("rwhois.arin.net", 4321)]
    result = ""

    while queue:
        host, port = queue.pop()

        s = None
        for res in socket.getaddrinfo(host, port, socket.AF_UNSPEC,
                                      socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            try:
                s = socket.socket(af, socktype, proto)
            except socket.error:
                s = None
                continue
            try:
                s.settimeout(10)
                s.connect(sa)
            except socket.error:
                s.close()
                s = None
                continue
            break
        if s is None:
            raise RuntimeError("could not connect to rwhois server '%s'" % host)

        s.send(query + "\n")
        res = ""
        while True:
            data = s.recv(4096)
            if not data: break
            res += data
        s.close()
        result += res

        for m in re.finditer(r"(?m)^%referral rwhois://(.*?):(\d+)/", res):
            queue.append(m.groups())

    return result


def extract_tags(src, context):
    attrs = defaultdict(list)
    in_context = False
    for linenum, line in src:
        line = line.strip()

        if line.startswith("#TAG: "):
            if in_context:
                return True
            if line == "#TAG: " + context.qname:
                in_context = True

        if not in_context:
            continue

        if line == "":
            if not attrs:
                continue

            ln, val = attrs.get("Org-Name", [(None, None)])[0]
            if val:
                taglib.tag("AS organization", val).implied_by(context, ln)

            attrs = defaultdict(list)

        elif line.startswith("#"):
            pass

        elif line.startswith("%"):
            pass

        else:
            m = re.match(r"^asn:(.*?)(;.)?:(.*?)$", line)
            if not m:
                print >>sys.stderr, "# unexpected line: %r" % line
            else:
                name, valtype, value = m.groups()
                attrs[name].append((linenum, value))

    return in_context


def main():
    context = taglib.env_tags.trigger
    asn = context.name

    taglib.default_filename = filename = "rwhois-asn.log"
    line_counter = count(1)
    found = False

    if os.path.exists(filename):
        with open(filename) as f:
            found = extract_tags(izip(line_counter, f), context)

    if not found:
        result = ("#TAG: " + context.qname + "\n" + 
                  rwhois_query("AS-Number=" + asn))
        with open(filename, "a") as f:
            f.write(result)
        line_counter = count(line_counter.next() - 1)
        extract_tags(izip(line_counter, result.splitlines()), context)
        
    taglib.tag("file", filename).used(filename=filename)
    taglib.output_tagging_log()

if __name__ == "__main__":
    main()
